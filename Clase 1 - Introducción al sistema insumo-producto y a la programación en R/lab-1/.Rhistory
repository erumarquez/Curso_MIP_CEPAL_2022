class(Z)
dim(Z)
colnames(Z) <- c("agric", "manuf")
rownames(Z) <- colnames (Z)
Z
Z[,"agric"]
f <- matrix(c(7,4),ncol=1) # demanda final
dimnames(f) <- list(rownames(Z),c("f"))
f
x <- rowSums(Z)+f # producto bruto
colnames(x) <- c("x")
x
m <- matrix(c(2,1),ncol=1) # importaciones intermedias
dimnames(m) <- list(rownames(Z),c("m"))
y <- x-colSums(Z)-m # valor agregado
colnames(y) <- c("y")
y
cbind(y,m,f,y+m-f)
IO_matrix <- rbind(cbind(Z,f,x),cbind(t(m),0,0),cbind(t(y),0,0),cbind(t(x),0,0))
IO_matrix
write.csv(IO_matrix,'C:/Users/Matias/Google Drive/CEPAL/DA_Mercosur-AP/CursoIP2019/Curso IP 2020 CEP/labs/lab-1/results/IO_matrix.csv')
write.csv(IO_matrix,'C:/Users/Matia/Google Drive/CEPAL/Curso IP/Curso IP 2021/Clase 1 - Introducción al sistema insumo-producto y a la programación en R/lab-1/results/IO_matrix.csv')
x <- 1
x = 1
x
y = x
y = 4
y + x # suma
z <- y + x # asigno el resultado de una suma
y - x # resta
y * x # multiplicacion
4 / 8 # division
2**5 # exponente
2^5 # exponente
x == 1
x == y
y > x
y!=x # distinto
a <- c(4,5,1,3) # es un vector "atomico", sus componentes de igual tipo e indivisibles
class(a) # tipos: logical, integer, double, complex (numeros), character, matrix, arrays, raw y list
a[2] # elemento numero 2
a[1:3] # elementos 1 a 3
a[c(2,4)] # elementos 2 y 4
a[-2] # todos menos el 2
a*2 # si aplico una operacion a un vector se aplica a todos sus componentes
b = c("a","b","c","d")
class(b)
class(b)
names(a)
names(a) <- b
a
a['b'] # ahora que tienen nombres puedo llamar tambien por nombre
matrix(a)
mat <- matrix(a,nrow=2,ncol=2) # los elementos se acomodan por columnas
mat[2] # no se suele usar
mat[1,2] # objeto de la fila 1 y columna 2
dim(mat)
mat*2
Z <- matrix(c(3,6,5,10), ncol=2) # Matriz de transacciones intermedias
Z
Z [1,2] # elemento en posicion (1,2) de la matriz Z
class(Z)
dim(Z)
colnames(Z) <- c("agric", "manuf")
rownames(Z) <- colnames (Z)
Z
Z[,"agric"]
f <- matrix(c(7,4),ncol=1) # demanda final
dimnames(f) <- list(rownames(Z),c("f"))
f
x <- rowSums(Z)+f # producto bruto
colnames(x) <- c("x")
x
m <- matrix(c(2,1),ncol=1) # importaciones intermedias
dimnames(m) <- list(rownames(Z),c("m"))
y <- x-colSums(Z)-m # valor agregado
colnames(y) <- c("y")
y
cbind(y,m,f,y+m-f)
IO_matrix <- rbind(cbind(Z,f,x),cbind(t(m),0,0),cbind(t(y),0,0),cbind(t(x),0,0))
IO_matrix
write.csv(IO_matrix,'C:/Users/Matia/Google Drive/CEPAL/Curso IP/Curso IP 2021/Clase 1 - Introducción al sistema insumo-producto y a la programación en R/lab-1/results/IO_matrix.csv')
# Control: sistemas de gasto e costo-ingreso
rowSums(Z)+f-x # sistema de gasto
colSums(Z)+y+m-x # sistema de costo-ingreso
A <- Z%*%diag(c(1/x)) # Requerimientos intermedios por unidad de producto. Usamos %*% para multiplicar matrices
A%*%x+f-x # Sistema de gasto en terminos intensivos
a_m <- m/x
a_y <- y/x
u <- matrix(c(1,1),ncol=1)
t(u)%*%A+t(a_m)+t(a_y) # Sistema de ingreso en terminos intensivos
x <- 1
x <- 1
x <- 1
x <- 1
x <- 1
x <- 2
x <- 1
x = 1
x
y = x
y = 4
y = x
y = 4
y + x # suma
y + x # suma
z <- y + x # asigno el resultado de una suma
z
y - x # resta
y * x # multiplicacion
4 / 8 # division
2^5 # exponente
2**5 # exponente
x == 1
x == y
y > x
y!=x # distinto
a <- c(4,5,1,3) # es un vector "atomico", sus componentes de igual tipo e indivisibles
class(a) # tipos: logical, integer, double, complex (numeros), character, matrix, arrays, raw y list
a[2] # elemento numero 2
a
a[2] # elemento numero 2
1:3
a[1:3] # elementos 1 a 3
a[c(2,4)] # elementos 2 y 4
a[-2] # todos menos el 2
a*2 # si aplico una operacion a un vector se aplica a todos sus componentes
a
a[2,4] # elementos 2 y 4
c(2,4)
b = c("a","b","c","d")
class(b)
a
names(a)
names(a) <- b
a
a[2] # elemento numero 2
a['b'] # ahora que tienen nombres puedo llamar tambien por nombre
matrix(a)
a
mat <- matrix(a,nrow=2,ncol=2) # los elementos se acomodan por columnas
mat
View(mat)
mat[2] # no se suele usar
mat[1,2] # objeto de la fila 1 y columna 2
dim(mat)
mat*2
Z <- matrix(c(3,6,5,10), ncol=2) # Matriz de transacciones intermedias
Z
Z <- matrix(c(3,6,5,10), ncol=2) # Matriz de transacciones intermedias
Z
Z [1,2]
class(Z)
dim(Z)
colnames(Z) <- c("agric", "manuf")
rownames(Z) <- colnames (Z)
Z
Z[,"agric"]
f <- matrix(c(7,4),ncol=1) # demanda final
f
dimnames(f) <- list(rownames(Z),c("f"))
f
list(rownames(Z),c("f"))
f
rowSums(Z)
x <- rowSums(Z)+f # producto bruto
x
colnames(x) <- c("x")
x
m <- matrix(c(2,1),ncol=1) # importaciones intermedias
dimnames(m) <- list(rownames(Z),c("m"))
m
y <- x-colSums(Z)-m # valor agregado
y
colnames(y) <- c("y")
y
cbind(y,m,f,y+m-f)
cbind(Z,f,x)
IO_matrix <- rbind(cbind(Z,f,x),cbind(t(m),0,0),cbind(t(y),0,0),cbind(t(x),0,0))
IO_matrix
IO_matrix <- rbind(cbind(Z,f,x),cbind(t(m)),cbind(t(y),0,0),cbind(t(x),0,0))
m
t(m)
IO_matrix
write.csv(IO_matrix,'C:/Users/Matia/Google Drive/CEPAL/Curso IP/Curso IP 2021/Clase 1 - Introducción al sistema insumo-producto y a la programación en R/lab-1/results/IO_matrix.csv')
rowSums(Z)
rowSums(Z)+f
# Control: sistemas de gasto e costo-ingreso
rowSums(Z)+f-x # sistema de gasto
colSums(Z)+y+m-x
x
1/x
c(1/x)
diag(c(1/x))
Z
x
A <- Z%*%diag(c(1/x)) # Requerimientos intermedios por unidad de producto. Usamos %*% para multiplicar matrices
A
Z
x
x**2
A
A%*%x
A%*%x+f-x # Sistema de gasto en terminos intensivos
A%*%x+f-x # Sistema de gasto en terminos intensivos
a_m <- m/x
a_m
a_y <- y/x
a_y
u <- matrix(c(1),nrow=2,ncol=1)
u
u <- matrix(c(1),nrow=2,ncol=1)
u <- matrix(c(1),nrow=22,ncol=1)
u
u <- matrix(c(1,2),nrow=22,ncol=1)
u
u <- matrix(c(1),nrow=2,ncol=1)
u
t(u)%*%A
t(a_m)
t(a_y)
t(u)%*%A+t(a_m)+t(a_y) # Sistema de ingreso en terminos intensivos
x <- 1
x = 1
x
y = x
y = 4
y + x # suma
z <- y + x # asigno el resultado de una suma
y - x # resta
y * x # multiplicacion
4 / 8 # division
2**5 # exponente
2^5 # exponente
x == 1
x == y
y > x
y!=x # distinto
a <- c(4,5,1,3) # es un vector "atomico", sus componentes de igual tipo e indivisibles
class(a) # tipos: logical, integer, double, complex (numeros), character, matrix, arrays, raw y list
a[2] # elemento numero 2
a[1:3] # elementos 1 a 3
a[c(2,4)] # elementos 2 y 4
a[-2] # todos menos el 2
a*2 # si aplico una operacion a un vector se aplica a todos sus componentes
b = c("a","b","c","d")
class(b)
names(a)
names(a) <- b
a
a['b'] # ahora que tienen nombres puedo llamar tambien por nombre
matrix(a)
mat <- matrix(a,nrow=2,ncol=2) # los elementos se acomodan por columnas
mat[2] # no se suele usar
mat[1,2] # objeto de la fila 1 y columna 2
dim(mat)
mat*2
Z <- matrix(c(3,6,5,10), ncol=2) # Matriz de transacciones intermedias
Z
Z [1,2] # elemento en posicion (1,2) de la matriz Z
class(Z)
dim(Z)
colnames(Z) <- c("agric", "manuf")
rownames(Z) <- colnames (Z)
Z
Z[,"agric"]
f <- matrix(c(7,4),ncol=1) # demanda final
dimnames(f) <- list(rownames(Z),c("f"))
f
x <- rowSums(Z)+f # producto bruto
colnames(x) <- c("x")
x
m <- matrix(c(2,1),ncol=1) # importaciones intermedias
dimnames(m) <- list(rownames(Z),c("m"))
y <- x-colSums(Z)-m # valor agregado
colnames(y) <- c("y")
y
cbind(y,m,f,y+m-f)
IO_matrix <- rbind(cbind(Z,f,x),cbind(t(m),0,0),cbind(t(y),0,0),cbind(t(x),0,0))
IO_matrix
write.csv(IO_matrix,'C:/Users/Matia/Google Drive/CEPAL/Curso IP/Curso IP 2021/Clase 1 - Introducción al sistema insumo-producto y a la programación en R/lab-1/results/IO_matrix.csv')
# Control: sistemas de gasto e costo-ingreso
rowSums(Z)+f-x # sistema de gasto
colSums(Z)+y+m-x # sistema de costo-ingreso
A <- Z%*%diag(c(1/x)) # Requerimientos intermedios por unidad de producto. Usamos %*% para multiplicar matrices
A%*%x+f-x # Sistema de gasto en terminos intensivos
a_m <- m/x
a_y <- y/x
u <- matrix(c(1),nrow=2,ncol=1)
t(u)%*%A+t(a_m)+t(a_y) # Sistema de ingreso en terminos intensivos
x <- 1
x = 1
x
y = x
y = 4
y + x # suma
z <- y + x # asigno el resultado de una suma
y - x # resta
y * x # multiplicacion
4 / 8 # division
2**5 # exponente
2^5 # exponente
y = 4
y + x # suma
z <- y + x # asigno el resultado de una suma
y - x # resta
y * x # multiplicacion
4 / 8 # division
2**5 # exponente
2^5 # exponente
x == 1
x == y
y > x
y!=x # distinto
a <- c(4,5,1,3) # es un vector "atomico", sus componentes de igual tipo e indivisibles
class(a) # tipos: logical, integer, double, complex (numeros), character, matrix, arrays, raw y list
a[2] # elemento numero 2
a[1:3] # elementos 1 a 3
a[c(2,4)] # elementos 2 y 4
a[-2] # todos menos el 2
a*2 # si aplico una operacion a un vector se aplica a todos sus componentes
b = c("a","b","c","d")
class(b)
names(a)
names(a) <- b
a
a['b'] # ahora que tienen nombres puedo llamar tambien por nombre
matrix(a)
mat <- matrix(a,nrow=2,ncol=2) # los elementos se acomodan por columnas
mat[2] # no se suele usar
mat[1,2] # objeto de la fila 1 y columna 2
dim(mat)
mat*2
Z <- matrix(c(3,6,5,10), ncol=2) # Matriz de transacciones intermedias
Z
Z [1,2] # elemento en posicion (1,2) de la matriz Z
class(Z)
dim(Z)
colnames(Z) <- c("agric", "manuf")
rownames(Z) <- colnames (Z)
Z
Z[,"agric"]
f <- matrix(c(7,4),ncol=1) # demanda final
dimnames(f) <- list(rownames(Z),c("f"))
f
x <- rowSums(Z)+f # producto bruto
colnames(x) <- c("x")
x
m <- matrix(c(2,1),ncol=1) # importaciones intermedias
dimnames(m) <- list(rownames(Z),c("m"))
y <- x-colSums(Z)-m # valor agregado
colnames(y) <- c("y")
y
cbind(y,m,f,y+m-f)
IO_matrix <- rbind(cbind(Z,f,x),cbind(t(m),0,0),cbind(t(y),0,0),cbind(t(x),0,0))
IO_matrix
write.csv(IO_matrix,'C:/Users/Matia/Google Drive/CEPAL/Curso IP/Curso IP 2021/Clase 1 - Introducción al sistema insumo-producto y a la programación en R/lab-1/results/IO_matrix.csv')
write.csv(IO_matrix,'C:/Users/Matia/Google Drive/CEPAL/Curso-IP/Curso IP 2022/Curso IP 2022/Clase 1 - Introducción al sistema insumo-producto y a la programación en R/lab-1/results')
write.csv(IO_matrix,'C:/Users/Matia/Google Drive/CEPAL/Curso-IP/Curso IP 2022/Curso IP 2022/Clase 1 - Introducción al sistema insumo-producto y a la programación en R/lab-1/results')
write.csv(IO_matrix,'C:/Users/Matia/Google Drive/CEPAL/Curso-IP/Curso IP 2022/Curso IP 2022/Clase 1 - Introducción al sistema insumo-producto y a la programación en R/lab-1/results')
write.csv(IO_matrix,'C:/Users/Matia/Google Drive/CEPAL/Curso-IP/Curso IP 2022/Curso IP 2022/Clase 1 - Introducción al sistema insumo-producto y a la programación en R/lab-1/results/IO_matrix.csv')
# Control: sistemas de gasto e costo-ingreso
rowSums(Z)+f-x # sistema de gasto
colSums(Z)+y+m-x # sistema de costo-ingreso
A <- Z%*%diag(c(1/x)) # Requerimientos intermedios por unidad de producto. Usamos %*% para multiplicar matrices
A%*%x+f-x # Sistema de gasto en terminos intensivos
a_m <- m/x
a_y <- y/x
u <- matrix(c(1),nrow=2,ncol=1)
t(u)%*%A+t(a_m)+t(a_y) # Sistema de ingreso en terminos intensivos
x <- 1
x <- 1
x = 1
x
y = x
y = 4
y + x # suma
y - x # resta
y * x # multiplicacion
4 / 8 # division
2**5 # exponente
x == 1
x == 1
x == y
y > x
y!=x # distinto
class(a) # tipos: logical, integer, double, complex (numeros), character, matrix, arrays, raw y list
a <- c(4,5,1,3) # es un vector "atomico", sus componentes de igual tipo e indivisibles
class(a) # tipos: logical, integer, double, complex (numeros), character, matrix, arrays, raw y list
mode(a) # tipos: logical, integer, double, complex (numeros), character, matrix, arrays, raw y list
type(a) # tipos: logical, integer, double, complex (numeros), character, matrix, arrays, raw y list
typeof(a) # tipos: character, numeric, integer, logical, complex
a[2] # elemento numero 2
a[1:3] # elementos 1 a 3
a[c(2,4)] # elementos 2 y 4
a[-2] # todos menos el 2
a*2 # si aplico una operacion a un vector se aplica a todos sus componentes
b = c("a","b","c","d")
class(b)
names(a)
names(a) <- b
a
class(b)
names(a)
b = c("a","b","c","d")
class(b)
names(a)
names(a) <- b
a
a['b'] # ahora que tienen nombres puedo llamar tambien por nombre
a
a['b'] # ahora que tienen nombres puedo llamar tambien por nombre
matrix(a)
mat <- matrix(a,nrow=2,ncol=2) # los elementos se acomodan por columnas
mat[2] # no se suele usar
matrix(a)
mat <- matrix(a,nrow=2,ncol=2) # los elementos se acomodan por columnas
class(mat)
# matrices ----------------------------------------------------------------
?class
# matrices ----------------------------------------------------------------
class(a)
matrix(a)
# matrices ----------------------------------------------------------------
class(a)
matrix(a)
mat <- matrix(a,nrow=2,ncol=2) # los elementos se acomodan por columnas
# matrices ----------------------------------------------------------------
class(a)
matrix(a)
mat <- matrix(a,nrow=2,ncol=2) # los elementos se acomodan por columnas
mat[2] # no se suele usar
mat[1,2] # objeto de la fila 1 y columna 2
# matrices ----------------------------------------------------------------
class(a)
a
matrix(a)
mat[2] # no se suele usar
mat[1,2] # objeto de la fila 1 y columna 2
dim(mat)
mat*2
Z <- matrix(c(3,6,5,10), ncol=2) # Matriz de transacciones intermedias
Z <- matrix(c(3,6,5,10), ncol=2) # Matriz de transacciones intermedias
Z
Z [1,2] # elemento en posicion (1,2) de la matriz Z
Z [1,2] # elemento en posicion (1,2) de la matriz Z
class(Z)
mat <- matrix(a,nrow=2,ncol=2) # los elementos se acomodan por columnas
# matrices ----------------------------------------------------------------
class(mat)
# matrices ----------------------------------------------------------------
typeof(mat)
class(b)
# matrices ----------------------------------------------------------------
class(a[1])
# matrices ----------------------------------------------------------------
class(a)
# matrices ----------------------------------------------------------------
class(mat)
# matrices ----------------------------------------------------------------
class(mat[1])
matrix(a)
mat <- matrix(a,nrow=2,ncol=2) # los elementos se acomodan por columnas
mat[2] # no se suele usar
mat[1,2] # objeto de la fila 1 y columna 2
dim(mat)
mat*2
Z <- matrix(c(3,6,5,10), ncol=2) # Matriz de transacciones intermedias
Z
Z [1,2] # elemento en posicion (1,2) de la matriz Z
class(Z)
dim(Z)
colnames(Z) <- c("agric", "manuf")
rownames(Z) <- colnames (Z)
Z
Z[,"agric"]
f <- matrix(c(7,4),ncol=1) # demanda final
dimnames(f) <- list(rownames(Z),c("f"))
f
class(list(mat,Z))
f <- matrix(c(7,4),ncol=1) # demanda final
dimnames(f) <- list(rownames(Z),c("f"))
f
x <- rowSums(Z)+f # producto bruto
colnames(x) <- c("x")
x
m <- matrix(c(2,1),ncol=1) # importaciones intermedias
dimnames(m) <- list(rownames(Z),c("m"))
y <- x-colSums(Z)-m # valor agregado
m <- matrix(c(2,1),ncol=1) # importaciones intermedias
dimnames(m) <- list(rownames(Z),c("m"))
y <- x-colSums(Z)-m # valor agregado
colnames(y) <- c("y")
y
cbind(y,m,f,y+m-f)
IO_matrix <- rbind(cbind(Z,f,x),cbind(t(m),0,0),cbind(t(y),0,0),cbind(t(x),0,0))
IO_matrix
cbind(y,m,f,y+m-f)
cbind(y,m,f,y+m-f)
IO_matrix <- rbind(cbind(Z,f,x),cbind(t(m),0,0),cbind(t(y),0,0),cbind(t(x),0,0))
IO_matrix
# Control: sistemas de gasto e costo-ingreso
rowSums(Z)+f-x # sistema de gasto
# Control: sistemas de gasto e costo-ingreso
rowSums(Z)+f-x # sistema de gasto
colSums(Z)+y+m-x # sistema de costo-ingreso
A <- Z%*%diag(c(1/x)) # Requerimientos intermedios por unidad de producto. Usamos %*% para multiplicar matrices
A%*%x+f-x # Sistema de gasto en terminos intensivos
a_m <- m/x
a_y <- y/x
u <- matrix(c(1),nrow=2,ncol=1)
t(u)%*%A+t(a_m)+t(a_y) # Sistema de ingreso en terminos intensivos
